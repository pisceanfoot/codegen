/***************************************************
文件名：		${class.Name.ToLower()}.cs
Copyright  (c)  2006-2008 偷懒码农

编写人：		Code Generation
改写者：		无

改写日期：		$now
***************************************************/

#region using
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
#endregion
		
namespace ${namespace}.Model
{
	/// <summary>
	/// 描述 $class.PascalCaseName
	/// </summary>
	public partial class $class.PascalCaseName : ChinaBest.Common.Model.BaseModel, IComparable<${namespace}.Model.${class.PascalCaseName}>, ICloneable
	{
		#region 私有成员变量
#foreach($item in $class.Columns)
#if($item.Comment != "")
		/// <summary>
		/// $item.Comment
		/// </summary>
#end
		private $item.LanguageType m_$item.CamelCaseName;
#end
		#endregion
		
		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public $!{class.PascalCaseName}()
		{
#foreach($item in $class.Columns)
			this.m_$item.CamelCaseName = $item.EmptyValue;
#end
		}
		
		public static ChinaBest.Common.Model.BaseModel FromDataReader(SqlDataReader reader)
        {
			${namespace}.Model.$class.PascalCaseName $class.CamelCaseName = new ${namespace}.Model.${class.PascalCaseName}();
#foreach($column in $class.Columns)                            
			if (reader["$column.Name"] != DBNull.Value)
				${class.CamelCaseName}.${column.PascalCaseName} = ${column.ConvertMethod}(reader["$column.Name"]);
#end
			return $class.CamelCaseName;
        }
		#endregion

		#region 公有属性

#foreach($item in $class.Columns)
#if($item.Comment != "")
		/// <summary>
		///	获取或设置 $item.Comment
		/// </summary>
#end
		public $item.LanguageType $item.PascalCaseName
		{
			get { return m_$item.CamelCaseName; }
			set { m_$item.CamelCaseName = value; }
		}
#end
		#endregion
		
		#region 比较函数
        public int CompareTo(${namespace}.Model.${class.PascalCaseName} other)
        {
            int result = 0;
            
#foreach($column in $class.Columns)                            
			result = this.m_${column.CamelCaseName}.CompareTo(other.m_${column.CamelCaseName});
            if (result != 0) return result;
#end
            return result;
        }
        #endregion
        
		#region 克隆函数
        public object Clone()
        {
            return this.MemberwiseClone();
        }
        #endregion

		#region SQL参数函数
        /// <summary>
        /// 根据指定的状态从当前实例构造 SqlCommand 的参数数组。
        /// </summary>
        /// <param name="state">
        /// 输入参数，指定的状态：
        /// 0：普通状态，1：范围查询的开始状态，2：范围查询的结束状态。
        /// </param>
        /// <returns>此方法创建的 SqlCommand 的参数数组。</returns>
        public override SqlParameter[] GetSqlParameters(int state)
        {
            String strstate = "";
            switch (state)
            {
                case 1:
                    strstate = "from";
                    break;
                case 2:
                    strstate = "to";
                    break;
                default:
                    strstate = "";
                    break;
            }
            
            SqlParameter para = null;
            List<SqlParameter> parameterlist = new List<SqlParameter>();
            
#foreach($column in $class.Columns)
			para = new SqlParameter("@${column.Name}" + strstate, ${column.SqlClientType}, ${column.Precision}, "${column.Name}");
            if (this.${column.PascalCaseName} == $column.EmptyValue)
                para.Value = DBNull.Value;
            else
                para.Value = this.${column.PascalCaseName};
            parameterlist.Add(para);
#end

            return parameterlist.ToArray();
        }
        #endregion

	}
}