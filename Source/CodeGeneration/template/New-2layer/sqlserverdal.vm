#region Notice
/***************************************************************************
文件名：        ${class.Name.ToLower()}.cs
Copyright  (c)  2006-2007 偷懒码农
编写人：        Code Generation
改写者：        无
改写日期：        无
*****************************************************************************/
#endregion

#region using
using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ChinaBest.Common.Data;
using ChinaBest.Common.Model;
#endregion

/// <summary>
/// 定义 SqlServerDAL
/// </summary>
namespace ${namespace}.SqlServerDAL
{
    public partial class ${class.PascalCaseName}
    {
#set($index = 0)
#set($pindex = 0)
#set($sql = "")
#set($para = "")
#set($update_para = "")
#foreach($column in $class.Columns)
	#if ($index == 0)
		#set($sql = "[$column.Name]")
		#set($para = "@$column.Name")
	#else
		#set($sql = "$sql, [$column.Name]")
		#set($para = "$para, @$column.Name")
	#end
	#if (!$column.IsPrimaryKey)
	#if($pindex == 0)
		#set($update_para = "[$column.Name] = @$column.Name")
	#else
		#set($update_para = "$update_para, [$column.Name] = @$column.Name")
	#end
	#set($pindex = $pindex + 1)
	#end
#set($index = $index + 1)
#end
#set($index = 0)
#set($pindex = 0)

        public static bool Insert(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, SqlTransaction trans)
        {
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "INSERT INTO [${class.Name}] (${sql})" +
	            " VALUES (${para})";
            cmd.Parameters.AddRange(${class.CamelCaseName}.GetSqlParameters(0));
            try
            {
                return SingleSQLConnection.ExecuteNonQuery(cmd, trans);
            }
            catch (Exception exce)
            {
                throw exce;
            }
        }


		public static bool Update(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, SqlTransaction trans)
        {
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "UPDATE [${class.Name}] SET ${update_para} " + 
		" WHERE [${class.PK.Name}] = @${class.PK.Name}";
	   
            cmd.Parameters.AddRange(${class.CamelCaseName}.GetSqlParameters(0));
            try
            {
                return SingleSQLConnection.ExecuteNonQuery(cmd, trans);
            }
            catch (Exception exce)
            {
                throw exce;
            }
        }

		public static bool Delete(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, SqlTransaction trans)
        {
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "DELETE [${class.Name}] WHERE [${class.PK.Name}] = @${class.PK.Name}";
            cmd.Parameters.AddRange(${class.CamelCaseName}.GetSqlParameters(0));
            try
            {
                return SingleSQLConnection.ExecuteNonQuery(cmd, trans);
            }
            catch (Exception exce)
            {
                throw exce;
            }
        }

		public static ${namespace}.Model.${class.PascalCaseName} GetAt(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, SqlTransaction trans)
        {
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT $sql FROM [${class.Name}] WHERE [${class.PK.Name}] = @${class.PK.Name}";
            cmd.Parameters.AddRange(${class.CamelCaseName}.GetSqlParameters(0));
            try
            {
                ${namespace}.Model.${class.PascalCaseName} tmp${class.CamelCaseName} = 
                    SingleSQLConnection.ExecuteSingleReader(cmd, trans, 
                    new BaseModel.SQLReaderCreator(${namespace}.Model.${class.PascalCaseName}.FromDataReader)) as ${namespace}.Model.${class.PascalCaseName};
                return tmp${class.CamelCaseName};
            }
            catch (Exception exce)
            {
                throw exce;
            }
        }
	
		public static List<${namespace}.Model.${class.PascalCaseName}> GetItems(SqlTransaction trans)
        {
            return GetItemsByCommonQuery(trans, null);
        }

	
		public static List<${namespace}.Model.${class.PascalCaseName}> GetItemsByCommonQuery(SqlTransaction trans, SingleSQLConnection.GetOrderByAndWhere statement)
        {
            List<OrderByStatement> orderbylist = new List<OrderByStatement>();
            List<WhereStatement> wherelist = new List<WhereStatement>();

            if(statement != null)
                statement(orderbylist, wherelist);

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT $sql FROM [${class.Name}] " +
                SingleSQLConnection.GetWhereStatement(wherelist) +
                SingleSQLConnection.GetOrderByStatement(orderbylist);
            try
            {
                List<BaseModel> modellist =
                    SingleSQLConnection.ExecuteMultiReader(cmd, trans,
                    new BaseModel.SQLReaderCreator(${namespace}.Model.${class.PascalCaseName}.FromDataReader));
                List<${namespace}.Model.${class.PascalCaseName}> ${class.CamelCaseName}list = new List<${namespace}.Model.${class.PascalCaseName}>();
                foreach (BaseModel basemodel in modellist)
                    ${class.CamelCaseName}list.Add((${namespace}.Model.${class.PascalCaseName})basemodel);
                return ${class.CamelCaseName}list;
            }
            catch (Exception exce)
            {
                throw exce;
            }
        }

		private static List<${namespace}.Model.${class.PascalCaseName}> GetItemsByCommonQuery(SqlTransaction trans, List<OrderByStatement> orderbylist, 
            List<WhereStatement> wherelist, SqlParameter[] parameters)
        {
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = "SELECT $sql FROM [${class.Name}] " +
                SingleSQLConnection.GetWhereStatement(wherelist) +
                SingleSQLConnection.GetOrderByStatement(orderbylist);
            cmd.Parameters.AddRange(parameters);
            try
            {
                List<BaseModel> modellist =
                    SingleSQLConnection.ExecuteMultiReader(cmd, trans,
                    new BaseModel.SQLReaderCreator(${namespace}.Model.${class.PascalCaseName}.FromDataReader));
                List<${namespace}.Model.${class.PascalCaseName}> ${class.CamelCaseName}list = new List<${namespace}.Model.${class.PascalCaseName}>();
                foreach (BaseModel basemodel in modellist)
                    ${class.CamelCaseName}list.Add((${namespace}.Model.${class.PascalCaseName})basemodel);
                return ${class.CamelCaseName}list;
            }
            catch (Exception exce)
            {
                throw exce;
            }
        }

	}
}