#region Notice
/***************************************************************************
文件名：        ${class.Name.ToLower()}.cs
Copyright  (c)  2006-2010 上海中主信息科技有限公司
编写人：        Code Generation
改写者：        无
改写日期：      $now
*****************************************************************************/
#endregion

#region using
using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ChinaBest.DBUtility;
using ${namespace}.SqlServerDAL;
#endregion

/// <summary>
/// 定义 SqlServerDAL
/// </summary>
namespace ${namespace}.SqlServerDAL
{
    public partial class ${class.PascalCaseName}
    {
        #region 构造函数
        /// <summary>
        /// 默认构造函数
        /// </summary>
        public ${class.PascalCaseName}()
        {
        }
        #endregion
        
        #region 成员方法
#set($index = 0)
#foreach($column in $class.Columns)
#if ($column.IsPrimaryKey)
#if ($index == 0)
        /// <summary>
        /// 根据编号获取 ${class.PascalCaseName} 集合
        /// </summary>
        public bool Exists($column.LanguageType $column.CamelCaseName)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT ${class.PK.Name} FROM [${class.Name}]");
            sql.Append(" WHERE [${class.PK.Name}] = @${class.PK.Name}");

            SqlParameter parameter = SqlHelper.MakeInParam("@${class.PK.Name}", ${class.PK.SqlClientType}, ${class.PK.Precision}, ${class.PK.CamelCaseName});

            object obj = SqlHelper.ExecuteScalar(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), parameter);
            return obj != null;
        }
        
#set($index = $index + 1)
#end
#end
#end
        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT ${class.PK.Name} FROM [${class.Name}] WHERE ");
            
            StringBuilder p = new StringBuilder();
            
            List<SqlParameter> sqlParameterList = new List<SqlParameter>();

#foreach($column in $class.Columns)
            if(${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" AND ${column.Name} = @${column.Name}");
                sqlParameterList.Add(SqlHelper.MakeInParam("@$column.Name", $column.SqlClientType, $column.Precision, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end
            sql.Append(p.ToString().Substring(4));
            
            object obj = SqlHelper.ExecuteScalar(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), sqlParameterList.ToArray());
            return obj != null;
        }
#if ($class.Type == "table")
#set($indentityindex = 0)
#set($selectedidentityid = "")
#set($selectedidentityidparameter = "")
#set($selectedidentityidvalue = "")
#set($selectedidentityidvalue1 = '"')
#foreach($column in $class.Columns)
	#if ($column.AutoIncrement)
		#if ($indentityindex == 0)
			#if ($column.IsPrimaryKey)
				#set($selectedidentityid = ";SELECT @NEWID = @@IDENTITY;")
				#set($selectedidentityidparameter = "parameterList.Add(SqlHelper.MakeOutParam(${selectedidentityidvalue1}@NEWID${selectedidentityidvalue1}, ${column.SqlClientType}, ${column.Precision}));")
				#set($selectedidentityidvalue = "${class.CamelCaseName}.${column.PascalCaseName} = Convert.ToInt32(parameterList[0].Value);")
				#set($indentityindex = 1)
			#end
		#end
	#end
#end

        /// <summary>
        /// 增加一条数据
        /// </summary>
        public bool Add(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName)
        {
            string sql = "INSERT INTO [${class.Name}] ({0}) VALUES ({1})${selectedidentityid}";
            StringBuilder p = new StringBuilder();
            StringBuilder v = new StringBuilder();
            
            List<SqlParameter> parameterList = new List<SqlParameter>();
			${selectedidentityidparameter}
#foreach($column in $class.Columns)
#if (!${column.AutoIncrement})
            if(${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" ${column.Name},");
                v.Append(" @${column.Name},");
                parameterList.Add(SqlHelper.MakeInParam("@${column.Name}", $column.SqlClientType, $column.Precision, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end
#end
            if(p.Length > 0)
            {
                p = p.Remove(p.Length -1, 1);
                v = v.Remove(v.Length -1, 1);
            }
            
            string tmpSql = string.Format(sql.ToString(), p.ToString(), v.ToString());

            int result = SqlHelper.ExecuteNonQuery(DBResource.ConnectionString, System.Data.CommandType.Text, tmpSql, parameterList.ToArray());
            ${selectedidentityidvalue}
            return result > 0;
        }
#if($class.PK)

        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("UPDATE [${class.Name}] SET ");
            StringBuilder p = new StringBuilder();

            List<SqlParameter> sqlParameterList = new List<SqlParameter>();

#foreach($column in $class.Columns)
#if(!$column.AutoIncrement && !$column.IsPrimaryKey)
            if(${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" , ${column.Name} = @${column.Name}");
                sqlParameterList.Add(SqlHelper.MakeInParam("@$column.Name", $column.SqlClientType, $column.Precision, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end
#end
            sql.Append(p.ToString().Substring(2));
            sql.Append(" WHERE [${class.PK.Name}] = @${class.PK.Name}");
            sqlParameterList.Add(SqlHelper.MakeInParam("@$class.PK.Name", $class.PK.SqlClientType, $class.PK.Precision, ${class.CamelCaseName}.${class.PK.PascalCaseName}));

			int result = SqlHelper.ExecuteNonQuery(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), sqlParameterList.ToArray());
            return result > 0;
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete($class.PK.LanguageType $class.PK.CamelCaseName)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("DELETE [${class.Name}] ");
            sql.Append(" WHERE [${class.PK.Name}] = @${class.PK.Name}");

            SqlParameter[] parameters = {
                SqlHelper.MakeInParam("@${class.PK.Name}", ${class.PK.SqlClientType}, ${class.PK.Precision}, ${class.PK.CamelCaseName})        
            };

            int result = SqlHelper.ExecuteNonQuery(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), parameters);
            return result > 0;
        }
#end
## end pk
#end
## end table

		/// <summary>
        /// 获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItems()
        {
			return GetItemsOrderBy(null);
        }
		
        /// <summary>
        /// 获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItemsOrderBy(string orderBy)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT * FROM [${class.Name}] ");
            if(!string.IsNullOrEmpty(orderBy))
            {
				sql.Append(" order by " + orderBy);
            }
            
            List<${namespace}.Model.$class.PascalCaseName> list = new List<${namespace}.Model.$class.PascalCaseName>();

            SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), null);
            while (reader.Read())
            {
                ${namespace}.Model.$class.PascalCaseName $class.CamelCaseName = new ${namespace}.Model.${class.PascalCaseName}();
#foreach($column in $class.Columns)                            
                if (reader["$column.Name"] != DBNull.Value)
                    ${class.CamelCaseName}.${column.PascalCaseName} = ${column.ConvertMethod}(reader["$column.Name"]);
#end

                list.Add($class.CamelCaseName);
            }           
            reader.Close();

            return list;
        }
        
        /// <summary>
        /// 获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItems(string selectColumn)
        {
			return GetItems(selectColumn, null);
        }
        
        /// <summary>
        /// 获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItems(string selectColumn, string orderBy)
        {
            selectColumn = selectColumn.ToLower();
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT " + selectColumn +" FROM [${class.Name}] ");
            if(!string.IsNullOrEmpty(orderBy))
            {
				sql.Append(" order by " + orderBy);
            }
            
            selectColumn = "," + selectColumn.Replace(" ", "") + ",";
            
            List<${namespace}.Model.$class.PascalCaseName> list = new List<${namespace}.Model.$class.PascalCaseName>();

            SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), null);
            while (reader.Read())
            {
                ${namespace}.Model.$class.PascalCaseName $class.CamelCaseName = new ${namespace}.Model.${class.PascalCaseName}();
              
#foreach($column in $class.Columns)                            
                if (selectColumn.IndexOf("," + "$column.Name.ToLower()" + ",") != -1 && reader["$column.Name"] != DBNull.Value)
                    ${class.CamelCaseName}.${column.PascalCaseName} = ${column.ConvertMethod}(reader["$column.Name"]);
#end

                 list.Add($class.CamelCaseName);
            }
            reader.Close();
            
            return list;
        }

        /// <summary>
        /// 根据条件获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItemListByCondition(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName)
        {
            return GetItemListByConditionOrderBy($class.CamelCaseName, null);
        }
        
        /// <summary>
        /// 根据条件获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItemListByCondition(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, string selectColumn)
        {
			return GetItemListByCondition($class.CamelCaseName, selectColumn, null);
        }
        
        /// <summary>
        /// 根据条件获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItemListByConditionOrderBy(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, string orderBy)
        {
			List<SqlParameter> sqlParameterList = new List<SqlParameter>();
            List<${namespace}.Model.$class.PascalCaseName> list = new List<${namespace}.Model.$class.PascalCaseName>();

            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT * FROM [${class.Name}]  WHERE ");
            StringBuilder p = new StringBuilder();

#foreach($column in $class.Columns)
            if (${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" and ${column.Name} = @${column.Name} ");
                sqlParameterList.Add(SqlHelper.MakeInParam("@${column.Name}", ${column.SqlClientType}, ${column.Precision}, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end

            sql.Append(p.ToString().Substring(4));
            
            if(!string.IsNullOrEmpty(orderBy))
            {
                sql.Append(" ORDER BY " + orderBy);
            }
            
            SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), sqlParameterList.ToArray());
            while (reader.Read())
            {
                ${namespace}.Model.${class.PascalCaseName} temp = new ${namespace}.Model.${class.PascalCaseName}();
#foreach($column in $class.Columns)
                if (reader["${column.Name}"] != DBNull.Value)
                    temp.${column.PascalCaseName} = ${column.ConvertMethod}(reader["${column.Name}"]);
#end
    
                 list.Add(temp);
            }
            reader.Close();

            return list;
        }
        
        /// <summary>
        /// 根据条件获取 ${class.PascalCaseName} 集合
        /// </summary>
        public List<${namespace}.Model.${class.PascalCaseName}> GetItemListByCondition(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, string selectColumn, string orderBy)
        {
            selectColumn = selectColumn.ToLower();
            List<SqlParameter> sqlParameterList = new List<SqlParameter>();
            List<${namespace}.Model.$class.PascalCaseName> list = new List<${namespace}.Model.$class.PascalCaseName>();

            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT " + selectColumn + " FROM [${class.Name}]  WHERE ");
            selectColumn = "," + selectColumn.Replace(" ", "") + ",";
            
            StringBuilder p = new StringBuilder();
#foreach($column in $class.Columns)
            if (${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" and ${column.Name} = @${column.Name} ");
                sqlParameterList.Add(SqlHelper.MakeInParam("@${column.Name}", ${column.SqlClientType}, ${column.Precision}, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end

            sql.Append(p.ToString().Substring(4));
            if(!string.IsNullOrEmpty(orderBy))
            {
    		    sql.Append(" order by " + orderBy);
            }
    
            SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), sqlParameterList.ToArray());
            while (reader.Read())
            {
                ${namespace}.Model.${class.PascalCaseName} temp = new ${namespace}.Model.${class.PascalCaseName}();
                                        
#foreach($column in $class.Columns)
                if (selectColumn.IndexOf("," + "$column.Name.ToLower()" + ",") != -1 && reader["${column.Name}"] != DBNull.Value)
                    temp.${column.PascalCaseName} = ${column.ConvertMethod}(reader["${column.Name}"]);
#end
                        
                list.Add(temp);
            }        
            reader.Close();
            
            return list;
        }
        
        /// <summary>
        /// 根据编号获取 ${class.PascalCaseName} 集合
        /// </summary>
        public ${namespace}.Model.${class.PascalCaseName} GetItemByCondition(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT * FROM [${class.Name}]  WHERE ");
            ${namespace}.Model.$class.PascalCaseName temp = null;

            List<SqlParameter> sqlParameterList = new List<SqlParameter>();
                StringBuilder p = new StringBuilder();

#foreach($column in $class.Columns)
            if (${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" and ${column.Name} = @${column.Name} ");
                sqlParameterList.Add(SqlHelper.MakeInParam("@${column.Name}", ${column.SqlClientType}, ${column.Precision}, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end

            sql.Append(p.ToString().Substring(4));
            SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), sqlParameterList.ToArray());
            if (reader.Read())
            {
                 temp = new ${namespace}.Model.${class.PascalCaseName}();
#foreach($column in $class.Columns)
                 if (reader["${column.Name}"] != DBNull.Value)
                     temp.${column.PascalCaseName} = ${column.ConvertMethod}(reader["${column.Name}"]);
#end
            }        
            reader.Close();
                
            return temp;
        }
        
        /// <summary>
        /// 根据编号获取 ${class.PascalCaseName} 集合
        /// </summary>
        public ${namespace}.Model.${class.PascalCaseName} GetItemByCondition(${namespace}.Model.${class.PascalCaseName} $class.CamelCaseName, string selectColumn)
        {
            selectColumn = selectColumn.ToLower();
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT " + selectColumn + " FROM [${class.Name}]  WHERE ");
            ${namespace}.Model.$class.PascalCaseName temp = null;

            List<SqlParameter> sqlParameterList = new List<SqlParameter>();
            StringBuilder p = new StringBuilder();

#foreach($column in $class.Columns)
            if (${class.CamelCaseName}.${column.PascalCaseName} != ${column.EmptyValue})
            {
                p.Append(" and ${column.Name} = @${column.Name} ");
                sqlParameterList.Add(SqlHelper.MakeInParam("@${column.Name}", ${column.SqlClientType}, ${column.Precision}, ${class.CamelCaseName}.${column.PascalCaseName}));
            }
#end

            sql.Append(p.ToString().Substring(4));
            SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), sqlParameterList.ToArray());
            if (reader.Read())
            {
                temp = new ${namespace}.Model.${class.PascalCaseName}();
            
#foreach($column in $class.Columns)
                if (selectColumn.IndexOf("${column.Name.ToLower()}") != -1 && reader["${column.Name}"] != DBNull.Value)
                    temp.${column.PascalCaseName} = ${column.ConvertMethod}(reader["${column.Name}"]);
#end
            }            
            reader.Close();

            return temp;
        }
        
#set($index = 0)
#foreach($column in $class.Columns)
#if ($column.IsPrimaryKey)
#if ($index == 0)
        /// <summary>
        /// 根据编号获取 ${class.PascalCaseName} 集合
        /// </summary>
        public ${namespace}.Model.${class.PascalCaseName} GetItemById($column.LanguageType $column.CamelCaseName)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT * FROM [${class.Name}] ");
            sql.Append("WHERE [${class.PK.Name}] = @${class.PK.Name}");

            ${namespace}.Model.${class.PascalCaseName} ${class.CamelCaseName} = null;

            SqlParameter[] parameters = {
                    SqlHelper.MakeInParam("@${class.PK.Name}", ${class.PK.SqlClientType}, ${class.PK.Precision}, ${class.PK.CamelCaseName})
                };

	        SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), parameters);
            if (reader.Read())
            {
                ${class.CamelCaseName} = new ${namespace}.Model.${class.PascalCaseName}();
#foreach($column in $class.Columns)
                if (reader["${column.Name}"] != DBNull.Value)
                    ${class.CamelCaseName}.${column.PascalCaseName} = ${column.ConvertMethod}(reader["${column.Name}"]);
#end
            }    
            reader.Close();

            return ${class.CamelCaseName};
        }
        
        /// <summary>
        /// 根据编号获取 ${class.PascalCaseName} 集合
        /// </summary>
        public ${namespace}.Model.${class.PascalCaseName} GetItemById($column.LanguageType $column.CamelCaseName, string selectColumn)
        {
            selectColumn = selectColumn.ToLower();
            StringBuilder sql = new StringBuilder();
            sql.Append("SELECT " + selectColumn + " FROM [${class.Name}] ");
            sql.Append("WHERE [${class.PK.Name}] = @${class.PK.Name}");

            ${namespace}.Model.${class.PascalCaseName} ${class.CamelCaseName} = null;

            SqlParameter[] parameters = {
                    SqlHelper.MakeInParam("@${class.PK.Name}", ${class.PK.SqlClientType}, ${class.PK.Precision}, ${class.PK.CamelCaseName})
                };

			SqlDataReader reader = SqlHelper.ExecuteReader(DBResource.ConnectionString, System.Data.CommandType.Text, sql.ToString(), parameters);
            if (reader.Read())
            {
                ${class.CamelCaseName} = new ${namespace}.Model.${class.PascalCaseName}();
#foreach($column in $class.Columns)
                if (selectColumn.IndexOf("${column.Name.ToLower()}") != -1 && reader["${column.Name}"] != DBNull.Value)
                    ${class.CamelCaseName}.${column.PascalCaseName} = ${column.ConvertMethod}(reader["${column.Name}"]);
#end
            }     
            reader.Close();

            return ${class.CamelCaseName};
        }
#set($index = $index + 1)
#end
#end
#end
        #endregion    
    }
}